<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--
        SpringSecurity 使用的是过滤器Filter 而不是拦截器Interceptor，意味着SpringSecurity
        能够管理的不仅仅是SpringMVC 中的handler 请求，还包含Web 应用中所有请求。比如：
        项目中的静态资源也会被拦截，从而进行权限控制。

        特别注意： <filter-name>springSecurityFilterChain</filter-name> 标签中必须是
        springSecurityFilterChain。因为springSecurityFilterChain 在IOC 容器中对应真正执行权限
        控制的二十几个Filter，只有叫这个名字才能够加载到这些Filter。
    -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
        配置中央调度器（DispatcherServlet），
        <url-pattern>/</url-pattern> 表示拦截所有请求（包括访问静态资源和动态资源），
        由于spring-mvc.xml中配置了<mvc:default-servlet-handler />，
        所以用户访问静态资源的请求交给了tomcat的默认Servlet处理
    -->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!--
            一般地，服务器默认是在第一次接收到请求时创建Servlet对象的，
            这里设置在服务器启动阶段就创建中央调度器对象springDispatcherServlet
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>